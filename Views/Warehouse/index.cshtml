@model List<AdminBodegas.Models.Coordinacion>

@{
    ViewData["Title"] = "Bodegas";
}
<link href="~/Dhtmlx/skins/web/dhtmlx.css" rel="stylesheet" />
<style>
    .nav-tabs {
        border-radius: 0;
        margin-right: 2px;
        list-style: none; 
        padding: 0;
        margin: 0;
        display: flex; 
        gap: 5px;
    }

    .nav-tabs .nav-link:hover {
        filter: brightness(0.95);
    }

    .nav-link {
        background-color: #D9D9D9;
        color: black;
        border: none;
        padding: 8px;
    }

    .active {
        background-color: #D98E2E;
        color: white;
        border: none;
    }

</style>


<ul class="nav-tabs" style="border-bottom: none;">
    @for (int i = 0; i < Model.Count; i++)
    {
        <li class="nav-item">
            <button class="nav-link"
                    id="nav@(i)"
                    onclick="
                                selectButton(@i);
                                createGrid(@i);
                                populateGridWithData(@i);
                                loadLocations(@i);">
                @Model[i].coordinacion
            </button>
        </li>
    }
</ul>

<div class="tab-content mt-3">
    <div id="grid" style="height: 400px;"></div>
</div>

<div id="mapContainer" style="width: 100%; height: 800px;"></div>


@section Scripts {
    <script src="https://js.api.here.com/v3/3.1/mapsjs-core.js"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-service.js"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-ui.js"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js"></script>
    <link rel="stylesheet" href="https://js.api.here.com/v3/3.1/mapsjs-ui.css" />

    
    <script>
        const allData = @Html.Raw(Json.Serialize(Model));
        var grid;
        var maxColumns;
        let bodegaCoordenadas = {}; // Asociar id de fila con coordenada 

        const here = new H.service.Platform({
            apiKey: 'i6c5pX-hnCxkldOU17CZ2x9DyTI4HW3n0ZnGA78J1fo'
        });
        const defaultLayers = here.createDefaultLayers();
        const map = new H.Map(
            document.getElementById('mapContainer'),
            defaultLayers.vector.normal.map,
            {
                zoom: 5,
                center: { lat: 23.6435, lng: -102.5528 }
            }
        );
        new H.mapevents.Behavior(new H.mapevents.MapEvents(map));
        const ui = H.ui.UI.createDefault(map, defaultLayers);
        let markers = [];

        function selectButton(index) {
            Array.from(document.getElementsByClassName('nav-link')).forEach(element => {
                element.className = "nav-link ";
            });

            document.getElementById(`nav${index}`).className += 'active';
        }

        function createGrid(index) {
            if (grid) {
                grid.destructor();
            }
            grid = new dhtmlXGridObject('grid');
            grid.setImagePath("/Dhtmlx/skins/web/imgs/dhxgrid_web/");

            var data = allData[index].bodegas;
            maxColumns = Math.max(...data.map(bodega => bodega.visitas.length)); // Numero maximp de visitas en la bodega

            // Acomodar columnas necesarias para la informacion
            const headers = ["Bodega"];
            const columnWidths = ["400"];
            const columnAligns = ["left"];
            const columnTypes = ["ro"];
            const columnSorts = ["str"];
            const colors = [""];
            var highlight = false;

            for (let v = 0; v < maxColumns; v++) {
                headers.push("·Fecha visita<br>·Duración");
                headers.push("·Kg actuales<br>·Tarea");

                columnWidths.push("120","120");
                columnAligns.push("center","center");
                columnTypes.push("txt","ro");
                columnSorts.push("str","str");

                if (highlight) {
                    colors.push("#f2f2f2", "#f2f2f2");
                } else {
                    colors.push("", "");
                }
                highlight = !highlight;
            }

            grid.setHeader(headers.join(","));
            grid.setInitWidths(columnWidths.join(","));
            grid.setColAlign(columnAligns.join(","));
            grid.setColTypes(columnTypes.join(","));
            grid.setColSorting(columnSorts.join(","));
            grid.setColumnColor(colors.join(","));

            grid.enableMultiline(true);

            grid.init();
        }

        function populateGridWithData(index) {
            var data = allData[index].bodegas;
            grid.clearAll();

            for (var i = 0; i < data.length; i++) {
                let bodega = data[i];
                let row = [`${bodega.bodega_c} - ${bodega.bodega_n}`];

                for (const visita of bodega.visitas) {
                    var rowVisitaFecha = `${visita.fecha}`;
                    rowVisitaFecha += '<br>';
                    rowVisitaFecha += `<span style="color: #00C0E7;">${visita.duracion}</span>`;

                    var rowVisitaTarea = `${visita.kilogramos}`;
                    rowVisitaTarea += `<br>`;
                    rowVisitaTarea += `<span style="color: #00C0E7;">${visita.actividad}</span>`;

                    row.push(rowVisitaFecha, rowVisitaTarea);
                }

                let rowId = grid.uid();

                grid.addRow(rowId, row);
                bodegaCoordenadas[rowId] = {
                    latitud: bodega.latitud,
                    longitud: bodega.longitud,
                    nombre: bodega.bodega_n
                }
            }
            grid.attachEvent("onRowSelect", function(rowId, colIndex) {
            const coordenada = bodegaCoordenadas[rowId];
            if (coordenada) {
                const point = new H.geo.Point(coordenada.latitud, coordenada.longitud);
                map.setCenter(point, true);

                const bubble = new H.ui.InfoBubble(point, {
                    content: coordenada.nombre
                });

                ui.getBubbles().forEach(b => ui.removeBubble(b));
                ui.addBubble(bubble);
            }
        });
        }

        function loadLocations(index) {
            clearMap();
            const bodegas = allData[index].bodegas;
            bodegas.forEach(location => {
                const position = new H.geo.Point(location.latitud, location.longitud);
                const marker = new H.map.Marker(position);
                marker.setData(location.bodega_n);
                map.addObject(marker);
                markers.push(marker);
            });
        }

        function highlightMarker(index) {
            map.setCenter(markers[index].geometry(), true);
            const bubble = new H.ui.InfoBubble(markers[index].getGeometry(), {
                content: markers[index].getData()
            });
            const ui = H.ui.UI.createDefault(map, defaultLayers);
            ui.addBubble(bubble);
        }

        function clearMap() {
            markers.forEach(marker => map.removeObject(marker));
            markers = [];
        }

        document.addEventListener('DOMContentLoaded', _ => {
            createGrid(0);
            populateGridWithData(0);
            selectButton(0);
            loadLocations(0);
        });
    </script>
}